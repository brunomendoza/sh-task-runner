#!/bin/bash

file_exists() {
    if [ -a $1 ]
    then
        echo "File exists"
        exit 1
    fi

    mkdir -p $1/src && cd $1
}

package_json() {
cat > package.json <<EOF
{
    "name": "${1##*/}",
    "version": "0.0.1",
    "private": true,
    "description": "",
    "scripts": {
        "build": "webpack",
        "watch": "webpack --watch",
        "start": "webpack serve --open"
    },
    "devDependencies": {}
}
EOF
}

npm_i_default() {
    npm i -D \
        webpack \
        webpack-cli \
        webpack-dev-server \
        html-webpack-plugin \
        style-loader \
        css-loader \
        sass-loader \
        sass
}

npm_i_react() {
    npm i -D \
        react \
        react-dom \
        @babel/core \
        @babel/preset-env \
        @babel/preset-react \
        babel-loader
}


# cat > .babelrc.json <<EOF
# {
#     "presets": [ "@babel/preset-env", "@babel/preset-react" ]
# }
# EOF

webpack_config_default() {
cat > webpack.config.js <<EOF
const path = require("path")
const HtmlWebpackPlugin = require("html-webpack-plugin")

module.exports = {
    entry: "./src/index.js",
    mode: "development",
    devtool: 'inline-source-map',
    devServer: {
        contentBase: path.join(__dirname, 'dist'),
        port: 9000,
        hot: true
    },
    plugins: [
        new HtmlWebpackPlugin({
            title: "${1##*/}",
            template: path.resolve(__dirname, "src/index.html")
        }),
    ],
    module: {
        rules: [
            {
                test: /\.s(ass|css)$/i,
                use: ["style-loader", "css-loader", "sass-loader"]
            }
        ]
    },
    output: {
        path: path.resolve(__dirname, 'dist'),
        filename: 'bundle.js'
    }
}
EOF
}

webpack_config_react() {
cat > webpack.config.js <<EOF
const path = require("path")
const HtmlWebpackPlugin = require("html-webpack-plugin")

module.exports = {
    entry: "./src/index.js",
    mode: "development",
    devtool: 'inline-source-map',
    devServer: {
        contentBase: path.join(__dirname, 'dist'),
        port: 9000,
        hot: true
    },
    plugins: [
        new HtmlWebpackPlugin({
            title: "${1##*/}",
            template: path.resolve(__dirname, "src/index.html")
        }),
    ],
    module: {
        rules: [
            {
                test: /\.(js|jsx)/i,
                exclude: /node_modules/,
                use: {
                    loader: 'babel-loader',
                    options: {
                        // The following line can be replaced by a .babelrc.json config file
                        presets: [ "@babel/preset-env", "@babel/preset-react" ]
                    }
                }
            },
            {
                test: /\.s(ass|css)$/i,
                use: ["style-loader", "css-loader", "sass-loader"]
            }
        ]
    },
    output: {
        path: path.resolve(__dirname, 'dist'),
        filename: 'bundle.js'
    }
}
EOF
}

mk_index_js() {
cat > src/index.js <<EOF
(() => {
    console.log("Hello, JS!")
})()
EOF
}

mk_react_index_js() {
cat > src/index.js <<EOF
import React from "react"
import ReactDOM from "react-dom"

ReactDOM.render(<App />, document.getElementById("root"))
EOF
}

mk_react_app_js() {
cat > src/App.js <<EOF
import React from "react"

function App() {
  return (
    <div>App</div>
  )
}
export default App
EOF
}

mk_index_html() {
cat > src/index.html <<EOF
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
    <div id="root"></div>
</body>
</html>
EOF
}

mk_git_ignore() {
cat >> .gitignore <<EOF
node_modules
package-lock.json
dist
EOF
}

mk_default() {
    file_exists $1
    package_json
    npm_i_default
    webpack_config_default
    mk_index_js
    mk_index_html
    mk_git_ignore
    npm run-script build
}

mk_react() {
    file_exists $1
    package_json
    npm_i_default
    npm_i_react
    webpack_config_react
    mk_react_index_js
    mk_react_app_js
    mk_index_html
    mk_git_ignore
    npm run-script build
}

select OPT in default react quit
do
    case $OPT in
        "default")
            mk_default $1
            break
            ;;
        "react")
            mk_react $1
            break
            ;;
        "quit")
            echo "Exiting"
            break
            ;;
        *)
            echo "Option not available"
            break
            ;;
    esac
done